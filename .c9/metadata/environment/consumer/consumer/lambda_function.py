{"filter":false,"title":"lambda_function.py","tooltip":"/consumer/consumer/lambda_function.py","undoManager":{"mark":50,"position":50,"stack":[[{"start":{"row":0,"column":0},"end":{"row":2,"column":13},"action":"remove","lines":["def lambda_handler(event, context):","    # TODO implement","    return ''"],"id":2},{"start":{"row":0,"column":0},"end":{"row":172,"column":55},"action":"insert","lines":["import json","","import boto3","import botocore","#import pandas as pd","import pandas as pd","import wikipedia","import boto3","from io import StringIO","","","#SETUP LOGGING","import logging","from pythonjsonlogger import jsonlogger","","LOG = logging.getLogger()","LOG.setLevel(logging.DEBUG)","logHandler = logging.StreamHandler()","formatter = jsonlogger.JsonFormatter()","logHandler.setFormatter(formatter)","LOG.addHandler(logHandler)","","#S3 BUCKET","REGION = \"us-east-1\"","","### SQS Utils###","def sqs_queue_resource(queue_name):","    \"\"\"Returns an SQS queue resource connection","","    Usage example:","    In [2]: queue = sqs_queue_resource(\"dev-job-24910\")","    In [4]: queue.attributes","    Out[4]:","    {'ApproximateNumberOfMessages': '0',","     'ApproximateNumberOfMessagesDelayed': '0',","     'ApproximateNumberOfMessagesNotVisible': '0',","     'CreatedTimestamp': '1476240132',","     'DelaySeconds': '0',","     'LastModifiedTimestamp': '1476240132',","     'MaximumMessageSize': '262144',","     'MessageRetentionPeriod': '345600',","     'QueueArn': 'arn:aws:sqs:us-west-2:414930948375:dev-job-24910',","     'ReceiveMessageWaitTimeSeconds': '0',","     'VisibilityTimeout': '120'}","","    \"\"\"","","    sqs_resource = boto3.resource('sqs', region_name=REGION)","    log_sqs_resource_msg = \"Creating SQS resource conn with qname: [%s] in region: [%s]\" %\\","     (queue_name, REGION)","    LOG.info(log_sqs_resource_msg)","    queue = sqs_resource.get_queue_by_name(QueueName=queue_name)","    return queue","","def sqs_connection():","    \"\"\"Creates an SQS Connection which defaults to global var REGION\"\"\"","","    sqs_client = boto3.client(\"sqs\", region_name=REGION)","    log_sqs_client_msg = \"Creating SQS connection in Region: [%s]\" % REGION","    LOG.info(log_sqs_client_msg)","    return sqs_client","","def sqs_approximate_count(queue_name):","    \"\"\"Return an approximate count of messages left in queue\"\"\"","","    queue = sqs_queue_resource(queue_name)","    attr = queue.attributes","    num_message = int(attr['ApproximateNumberOfMessages'])","    num_message_not_visible = int(attr['ApproximateNumberOfMessagesNotVisible'])","    queue_value = sum([num_message, num_message_not_visible])","    sum_msg = \"\"\"'ApproximateNumberOfMessages' and 'ApproximateNumberOfMessagesNotVisible' = *** [%s] *** for QUEUE NAME: [%s]\"\"\" %\\","         (queue_value, queue_name)","    LOG.info(sum_msg)","    return queue_value","","def delete_sqs_msg(queue_name, receipt_handle):","","    sqs_client = sqs_connection()","    try:","        queue_url = sqs_client.get_queue_url(QueueName=queue_name)[\"QueueUrl\"]","        delete_log_msg = \"Deleting msg with ReceiptHandle %s\" % receipt_handle","        LOG.info(delete_log_msg)","        response = sqs_client.delete_message(QueueUrl=queue_url, ReceiptHandle=receipt_handle)","    except botocore.exceptions.ClientError as error:","        exception_msg = \"FAILURE TO DELETE SQS MSG: Queue Name [%s] with error: [%s]\" %\\","            (queue_name, error)","        LOG.exception(exception_msg)","        return None","","    delete_log_msg_resp = \"Response from delete from queue: %s\" % response","    LOG.info(delete_log_msg_resp)","    return response","","def names_to_wikipedia(names):","","    wikipedia_snippit = []","    for name in names:","        wikipedia_snippit.append(wikipedia.summary(name, sentences=1))","    df = pd.DataFrame(","        {","            'names':names,","            'wikipedia_snippit': wikipedia_snippit","        }","    )","    return df","","def create_sentiment(row):","    \"\"\"Uses AWS Comprehend to Create Sentiments on a DataFrame\"\"\"","","    LOG.info(f\"Processing {row}\")","    comprehend = boto3.client(service_name='comprehend')","    payload = comprehend.detect_sentiment(Text=row, LanguageCode='en')","    LOG.debug(f\"Found Sentiment: {payload}\")","    sentiment = payload['Sentiment']","    return sentiment","","def apply_sentiment(df, column=\"wikipedia_snippit\"):","    \"\"\"Uses Pandas Apply to Create Sentiment Analysis\"\"\"","","    df['Sentiment'] = df[column].apply(create_sentiment)","    return df","","### S3 ###","","def write_s3(df, bucket, name):","    \"\"\"Write S3 Bucket\"\"\"","","    csv_buffer = StringIO()","    df.to_csv(csv_buffer)","    s3_resource = boto3.resource('s3')","    filename = f\"{name}_sentiment.csv\"","    res = s3_resource.Object(bucket, filename).\\","        put(Body=csv_buffer.getvalue())","    LOG.info(f\"result of write to bucket: {bucket} with:\\n {res}\")","","","","def lambda_handler(event, context):","    \"\"\"Entry Point for Lambda\"\"\"","","    LOG.info(f\"SURVEYJOB LAMBDA, event {event}, context {context}\")","    receipt_handle  = event['Records'][0]['receiptHandle'] #sqs message","    #'eventSourceARN': 'arn:aws:sqs:us-east-1:561744971673:producer'","    event_source_arn = event['Records'][0]['eventSourceARN']","","    names = [] #Captured from Queue","","    # Process Queue","    for record in event['Records']:","        body = json.loads(record['body'])","        company_name = body['name']","","        #Capture for processing","        names.append(company_name)","","        extra_logging = {\"body\": body, \"company_name\":company_name}","        LOG.info(f\"SQS CONSUMER LAMBDA, splitting sqs arn with value: {event_source_arn}\",extra=extra_logging)","        qname = event_source_arn.split(\":\")[-1]","        extra_logging[\"queue\"] = qname","        LOG.info(f\"Attemping Deleting SQS receiptHandle {receipt_handle} with queue_name {qname}\", extra=extra_logging)","        res = delete_sqs_msg(queue_name=qname, receipt_handle=receipt_handle)","        LOG.info(f\"Deleted SQS receipt_handle {receipt_handle} with res {res}\", extra=extra_logging)","","    # Make Pandas dataframe with wikipedia snippts","    LOG.info(f\"Creating dataframe with values: {names}\")","    df = names_to_wikipedia(names)","","    # Perform Sentiment Analysis","    df = apply_sentiment(df)","    LOG.info(f\"Sentiment from FANG companies: {df.to_dict()}\")","","    # Write result to S3","    write_s3(df=df, bucket=\"fangsentiment\", name=names)"]}],[{"start":{"row":0,"column":0},"end":{"row":172,"column":55},"action":"remove","lines":["import json","","import boto3","import botocore","#import pandas as pd","import pandas as pd","import wikipedia","import boto3","from io import StringIO","","","#SETUP LOGGING","import logging","from pythonjsonlogger import jsonlogger","","LOG = logging.getLogger()","LOG.setLevel(logging.DEBUG)","logHandler = logging.StreamHandler()","formatter = jsonlogger.JsonFormatter()","logHandler.setFormatter(formatter)","LOG.addHandler(logHandler)","","#S3 BUCKET","REGION = \"us-east-1\"","","### SQS Utils###","def sqs_queue_resource(queue_name):","    \"\"\"Returns an SQS queue resource connection","","    Usage example:","    In [2]: queue = sqs_queue_resource(\"dev-job-24910\")","    In [4]: queue.attributes","    Out[4]:","    {'ApproximateNumberOfMessages': '0',","     'ApproximateNumberOfMessagesDelayed': '0',","     'ApproximateNumberOfMessagesNotVisible': '0',","     'CreatedTimestamp': '1476240132',","     'DelaySeconds': '0',","     'LastModifiedTimestamp': '1476240132',","     'MaximumMessageSize': '262144',","     'MessageRetentionPeriod': '345600',","     'QueueArn': 'arn:aws:sqs:us-west-2:414930948375:dev-job-24910',","     'ReceiveMessageWaitTimeSeconds': '0',","     'VisibilityTimeout': '120'}","","    \"\"\"","","    sqs_resource = boto3.resource('sqs', region_name=REGION)","    log_sqs_resource_msg = \"Creating SQS resource conn with qname: [%s] in region: [%s]\" %\\","     (queue_name, REGION)","    LOG.info(log_sqs_resource_msg)","    queue = sqs_resource.get_queue_by_name(QueueName=queue_name)","    return queue","","def sqs_connection():","    \"\"\"Creates an SQS Connection which defaults to global var REGION\"\"\"","","    sqs_client = boto3.client(\"sqs\", region_name=REGION)","    log_sqs_client_msg = \"Creating SQS connection in Region: [%s]\" % REGION","    LOG.info(log_sqs_client_msg)","    return sqs_client","","def sqs_approximate_count(queue_name):","    \"\"\"Return an approximate count of messages left in queue\"\"\"","","    queue = sqs_queue_resource(queue_name)","    attr = queue.attributes","    num_message = int(attr['ApproximateNumberOfMessages'])","    num_message_not_visible = int(attr['ApproximateNumberOfMessagesNotVisible'])","    queue_value = sum([num_message, num_message_not_visible])","    sum_msg = \"\"\"'ApproximateNumberOfMessages' and 'ApproximateNumberOfMessagesNotVisible' = *** [%s] *** for QUEUE NAME: [%s]\"\"\" %\\","         (queue_value, queue_name)","    LOG.info(sum_msg)","    return queue_value","","def delete_sqs_msg(queue_name, receipt_handle):","","    sqs_client = sqs_connection()","    try:","        queue_url = sqs_client.get_queue_url(QueueName=queue_name)[\"QueueUrl\"]","        delete_log_msg = \"Deleting msg with ReceiptHandle %s\" % receipt_handle","        LOG.info(delete_log_msg)","        response = sqs_client.delete_message(QueueUrl=queue_url, ReceiptHandle=receipt_handle)","    except botocore.exceptions.ClientError as error:","        exception_msg = \"FAILURE TO DELETE SQS MSG: Queue Name [%s] with error: [%s]\" %\\","            (queue_name, error)","        LOG.exception(exception_msg)","        return None","","    delete_log_msg_resp = \"Response from delete from queue: %s\" % response","    LOG.info(delete_log_msg_resp)","    return response","","def names_to_wikipedia(names):","","    wikipedia_snippit = []","    for name in names:","        wikipedia_snippit.append(wikipedia.summary(name, sentences=1))","    df = pd.DataFrame(","        {","            'names':names,","            'wikipedia_snippit': wikipedia_snippit","        }","    )","    return df","","def create_sentiment(row):","    \"\"\"Uses AWS Comprehend to Create Sentiments on a DataFrame\"\"\"","","    LOG.info(f\"Processing {row}\")","    comprehend = boto3.client(service_name='comprehend')","    payload = comprehend.detect_sentiment(Text=row, LanguageCode='en')","    LOG.debug(f\"Found Sentiment: {payload}\")","    sentiment = payload['Sentiment']","    return sentiment","","def apply_sentiment(df, column=\"wikipedia_snippit\"):","    \"\"\"Uses Pandas Apply to Create Sentiment Analysis\"\"\"","","    df['Sentiment'] = df[column].apply(create_sentiment)","    return df","","### S3 ###","","def write_s3(df, bucket, name):","    \"\"\"Write S3 Bucket\"\"\"","","    csv_buffer = StringIO()","    df.to_csv(csv_buffer)","    s3_resource = boto3.resource('s3')","    filename = f\"{name}_sentiment.csv\"","    res = s3_resource.Object(bucket, filename).\\","        put(Body=csv_buffer.getvalue())","    LOG.info(f\"result of write to bucket: {bucket} with:\\n {res}\")","","","","def lambda_handler(event, context):","    \"\"\"Entry Point for Lambda\"\"\"","","    LOG.info(f\"SURVEYJOB LAMBDA, event {event}, context {context}\")","    receipt_handle  = event['Records'][0]['receiptHandle'] #sqs message","    #'eventSourceARN': 'arn:aws:sqs:us-east-1:561744971673:producer'","    event_source_arn = event['Records'][0]['eventSourceARN']","","    names = [] #Captured from Queue","","    # Process Queue","    for record in event['Records']:","        body = json.loads(record['body'])","        company_name = body['name']","","        #Capture for processing","        names.append(company_name)","","        extra_logging = {\"body\": body, \"company_name\":company_name}","        LOG.info(f\"SQS CONSUMER LAMBDA, splitting sqs arn with value: {event_source_arn}\",extra=extra_logging)","        qname = event_source_arn.split(\":\")[-1]","        extra_logging[\"queue\"] = qname","        LOG.info(f\"Attemping Deleting SQS receiptHandle {receipt_handle} with queue_name {qname}\", extra=extra_logging)","        res = delete_sqs_msg(queue_name=qname, receipt_handle=receipt_handle)","        LOG.info(f\"Deleted SQS receipt_handle {receipt_handle} with res {res}\", extra=extra_logging)","","    # Make Pandas dataframe with wikipedia snippts","    LOG.info(f\"Creating dataframe with values: {names}\")","    df = names_to_wikipedia(names)","","    # Perform Sentiment Analysis","    df = apply_sentiment(df)","    LOG.info(f\"Sentiment from FANG companies: {df.to_dict()}\")","","    # Write result to S3","    write_s3(df=df, bucket=\"fangsentiment\", name=names)"],"id":5}],[{"start":{"row":0,"column":0},"end":{"row":35,"column":61},"action":"insert","lines":["def lambda_handler(event, context):","    \"\"\"Entry Point for Lambda\"\"\"","","    LOG.info(f\"SURVEYJOB LAMBDA, event {event}, context {context}\")","    receipt_handle  = event['Records'][0]['receiptHandle'] #sqs message","    #'eventSourceARN': 'arn:aws:sqs:us-east-1:561744971673:producer'","    event_source_arn = event['Records'][0]['eventSourceARN']","","    names = [] #Captured from Queue","","    # Process Queue","    for record in event['Records']:","        body = json.loads(record['body'])","        company_name = body['name']","","        #Capture for processing","        names.append(company_name)","","        extra_logging = {\"body\": body, \"company_name\":company_name}","        LOG.info(f\"SQS CONSUMER LAMBDA, splitting sqs arn with value: {event_source_arn}\",extra=extra_logging)","        qname = event_source_arn.split(\":\")[-1]","        extra_logging[\"queue\"] = qname","        LOG.info(f\"Attemping Deleting SQS receiptHandle {receipt_handle} with queue_name {qname}\", extra=extra_logging)","        res = delete_sqs_msg(queue_name=qname, receipt_handle=receipt_handle)","        LOG.info(f\"Deleted SQS receipt_handle {receipt_handle} with res {res}\", extra=extra_logging)","","    # Make Pandas dataframe with wikipedia snippts","    LOG.info(f\"Creating dataframe with values: {names}\")","    df = names_to_wikipedia(names)","","    # Perform Sentiment Analysis","    df = apply_sentiment(df)","    LOG.info(f\"Sentiment from FANG companies: {df.to_dict()}\")","","    # Write result to S3","    write_s3(df=df, name=names.pop(), bucket=\"fangsentiment\")"],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":7},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":12,"column":39},"action":"insert","lines":["import boto3","import json","import sys","import os","","DYNAMODB = boto3.resource('dynamodb')","TABLE = \"fang\"","QUEUE = \"producer\"","SQS = boto3.client(\"sqs\")","","#SETUP LOGGING","import logging","from pythonjsonlogger import jsonlogger"],"id":8}],[{"start":{"row":8,"column":25},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":9},{"start":{"row":9,"column":0},"end":{"row":9,"column":1},"action":"insert","lines":["L"]}],[{"start":{"row":9,"column":1},"end":{"row":9,"column":2},"action":"insert","lines":["O"],"id":10},{"start":{"row":9,"column":2},"end":{"row":9,"column":3},"action":"insert","lines":["G"]},{"start":{"row":9,"column":3},"end":{"row":9,"column":4},"action":"insert","lines":["="]}],[{"start":{"row":9,"column":4},"end":{"row":9,"column":5},"action":"insert","lines":[" "],"id":11},{"start":{"row":9,"column":5},"end":{"row":9,"column":6},"action":"insert","lines":["l"]},{"start":{"row":9,"column":6},"end":{"row":9,"column":7},"action":"insert","lines":["o"]},{"start":{"row":9,"column":7},"end":{"row":9,"column":8},"action":"insert","lines":["g"]},{"start":{"row":9,"column":8},"end":{"row":9,"column":9},"action":"insert","lines":["g"]},{"start":{"row":9,"column":9},"end":{"row":9,"column":10},"action":"insert","lines":["i"]},{"start":{"row":9,"column":10},"end":{"row":9,"column":11},"action":"insert","lines":["n"]},{"start":{"row":9,"column":11},"end":{"row":9,"column":12},"action":"insert","lines":["g"]}],[{"start":{"row":9,"column":12},"end":{"row":9,"column":13},"action":"insert","lines":["."],"id":12},{"start":{"row":9,"column":13},"end":{"row":9,"column":14},"action":"insert","lines":["g"]},{"start":{"row":9,"column":14},"end":{"row":9,"column":15},"action":"insert","lines":["e"]},{"start":{"row":9,"column":15},"end":{"row":9,"column":16},"action":"insert","lines":["t"]},{"start":{"row":9,"column":16},"end":{"row":9,"column":17},"action":"insert","lines":["L"]},{"start":{"row":9,"column":17},"end":{"row":9,"column":18},"action":"insert","lines":["o"]},{"start":{"row":9,"column":18},"end":{"row":9,"column":19},"action":"insert","lines":["g"]},{"start":{"row":9,"column":19},"end":{"row":9,"column":20},"action":"insert","lines":["g"]},{"start":{"row":9,"column":20},"end":{"row":9,"column":21},"action":"insert","lines":["e"]},{"start":{"row":9,"column":21},"end":{"row":9,"column":22},"action":"insert","lines":["r"]}],[{"start":{"row":9,"column":22},"end":{"row":9,"column":24},"action":"insert","lines":["()"],"id":13}],[{"start":{"row":9,"column":3},"end":{"row":9,"column":4},"action":"insert","lines":[" "],"id":14}],[{"start":{"row":0,"column":0},"end":{"row":9,"column":25},"action":"remove","lines":["import boto3","import json","import sys","import os","","DYNAMODB = boto3.resource('dynamodb')","TABLE = \"fang\"","QUEUE = \"producer\"","SQS = boto3.client(\"sqs\")","LOG = logging.getLogger()"],"id":15},{"start":{"row":0,"column":0},"end":{"row":20,"column":26},"action":"insert","lines":["","import boto3","import json","import sys","import os","","DYNAMODB = boto3.resource('dynamodb')","TABLE = \"fang\"","QUEUE = \"producer\"","SQS = boto3.client(\"sqs\")","","#SETUP LOGGING","import logging","from pythonjsonlogger import jsonlogger","","LOG = logging.getLogger()","LOG.setLevel(logging.INFO)","logHandler = logging.StreamHandler()","formatter = jsonlogger.JsonFormatter()","logHandler.setFormatter(formatter)","LOG.addHandler(logHandler)"]}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":61},"action":"remove","lines":["","import boto3","import json","import sys","import os","","DYNAMODB = boto3.resource('dynamodb')","TABLE = \"fang\"","QUEUE = \"producer\"","SQS = boto3.client(\"sqs\")","","#SETUP LOGGING","import logging","from pythonjsonlogger import jsonlogger","","LOG = logging.getLogger()","LOG.setLevel(logging.INFO)","logHandler = logging.StreamHandler()","formatter = jsonlogger.JsonFormatter()","logHandler.setFormatter(formatter)","LOG.addHandler(logHandler)","","#SETUP LOGGING","import logging","from pythonjsonlogger import jsonlogger","","def lambda_handler(event, context):","    \"\"\"Entry Point for Lambda\"\"\"","","    LOG.info(f\"SURVEYJOB LAMBDA, event {event}, context {context}\")","    receipt_handle  = event['Records'][0]['receiptHandle'] #sqs message","    #'eventSourceARN': 'arn:aws:sqs:us-east-1:561744971673:producer'","    event_source_arn = event['Records'][0]['eventSourceARN']","","    names = [] #Captured from Queue","","    # Process Queue","    for record in event['Records']:","        body = json.loads(record['body'])","        company_name = body['name']","","        #Capture for processing","        names.append(company_name)","","        extra_logging = {\"body\": body, \"company_name\":company_name}","        LOG.info(f\"SQS CONSUMER LAMBDA, splitting sqs arn with value: {event_source_arn}\",extra=extra_logging)","        qname = event_source_arn.split(\":\")[-1]","        extra_logging[\"queue\"] = qname","        LOG.info(f\"Attemping Deleting SQS receiptHandle {receipt_handle} with queue_name {qname}\", extra=extra_logging)","        res = delete_sqs_msg(queue_name=qname, receipt_handle=receipt_handle)","        LOG.info(f\"Deleted SQS receipt_handle {receipt_handle} with res {res}\", extra=extra_logging)","","    # Make Pandas dataframe with wikipedia snippts","    LOG.info(f\"Creating dataframe with values: {names}\")","    df = names_to_wikipedia(names)","","    # Perform Sentiment Analysis","    df = apply_sentiment(df)","    LOG.info(f\"Sentiment from FANG companies: {df.to_dict()}\")","","    # Write result to S3","    write_s3(df=df, name=names.pop(), bucket=\"fangsentiment\")"],"id":16},{"start":{"row":0,"column":0},"end":{"row":172,"column":55},"action":"insert","lines":["import json","","import boto3","import botocore","#import pandas as pd","import pandas as pd","import wikipedia","import boto3","from io import StringIO","","","#SETUP LOGGING","import logging","from pythonjsonlogger import jsonlogger","","LOG = logging.getLogger()","LOG.setLevel(logging.DEBUG)","logHandler = logging.StreamHandler()","formatter = jsonlogger.JsonFormatter()","logHandler.setFormatter(formatter)","LOG.addHandler(logHandler)","","#S3 BUCKET","REGION = \"us-east-1\"","","### SQS Utils###","def sqs_queue_resource(queue_name):","    \"\"\"Returns an SQS queue resource connection","","    Usage example:","    In [2]: queue = sqs_queue_resource(\"dev-job-24910\")","    In [4]: queue.attributes","    Out[4]:","    {'ApproximateNumberOfMessages': '0',","     'ApproximateNumberOfMessagesDelayed': '0',","     'ApproximateNumberOfMessagesNotVisible': '0',","     'CreatedTimestamp': '1476240132',","     'DelaySeconds': '0',","     'LastModifiedTimestamp': '1476240132',","     'MaximumMessageSize': '262144',","     'MessageRetentionPeriod': '345600',","     'QueueArn': 'arn:aws:sqs:us-west-2:414930948375:dev-job-24910',","     'ReceiveMessageWaitTimeSeconds': '0',","     'VisibilityTimeout': '120'}","","    \"\"\"","","    sqs_resource = boto3.resource('sqs', region_name=REGION)","    log_sqs_resource_msg = \"Creating SQS resource conn with qname: [%s] in region: [%s]\" %\\","     (queue_name, REGION)","    LOG.info(log_sqs_resource_msg)","    queue = sqs_resource.get_queue_by_name(QueueName=queue_name)","    return queue","","def sqs_connection():","    \"\"\"Creates an SQS Connection which defaults to global var REGION\"\"\"","","    sqs_client = boto3.client(\"sqs\", region_name=REGION)","    log_sqs_client_msg = \"Creating SQS connection in Region: [%s]\" % REGION","    LOG.info(log_sqs_client_msg)","    return sqs_client","","def sqs_approximate_count(queue_name):","    \"\"\"Return an approximate count of messages left in queue\"\"\"","","    queue = sqs_queue_resource(queue_name)","    attr = queue.attributes","    num_message = int(attr['ApproximateNumberOfMessages'])","    num_message_not_visible = int(attr['ApproximateNumberOfMessagesNotVisible'])","    queue_value = sum([num_message, num_message_not_visible])","    sum_msg = \"\"\"'ApproximateNumberOfMessages' and 'ApproximateNumberOfMessagesNotVisible' = *** [%s] *** for QUEUE NAME: [%s]\"\"\" %\\","         (queue_value, queue_name)","    LOG.info(sum_msg)","    return queue_value","","def delete_sqs_msg(queue_name, receipt_handle):","","    sqs_client = sqs_connection()","    try:","        queue_url = sqs_client.get_queue_url(QueueName=queue_name)[\"QueueUrl\"]","        delete_log_msg = \"Deleting msg with ReceiptHandle %s\" % receipt_handle","        LOG.info(delete_log_msg)","        response = sqs_client.delete_message(QueueUrl=queue_url, ReceiptHandle=receipt_handle)","    except botocore.exceptions.ClientError as error:","        exception_msg = \"FAILURE TO DELETE SQS MSG: Queue Name [%s] with error: [%s]\" %\\","            (queue_name, error)","        LOG.exception(exception_msg)","        return None","","    delete_log_msg_resp = \"Response from delete from queue: %s\" % response","    LOG.info(delete_log_msg_resp)","    return response","","def names_to_wikipedia(names):","","    wikipedia_snippit = []","    for name in names:","        wikipedia_snippit.append(wikipedia.summary(name, sentences=1))","    df = pd.DataFrame(","        {","            'names':names,","            'wikipedia_snippit': wikipedia_snippit","        }","    )","    return df","","def create_sentiment(row):","    \"\"\"Uses AWS Comprehend to Create Sentiments on a DataFrame\"\"\"","","    LOG.info(f\"Processing {row}\")","    comprehend = boto3.client(service_name='comprehend')","    payload = comprehend.detect_sentiment(Text=row, LanguageCode='en')","    LOG.debug(f\"Found Sentiment: {payload}\")","    sentiment = payload['Sentiment']","    return sentiment","","def apply_sentiment(df, column=\"wikipedia_snippit\"):","    \"\"\"Uses Pandas Apply to Create Sentiment Analysis\"\"\"","","    df['Sentiment'] = df[column].apply(create_sentiment)","    return df","","### S3 ###","","def write_s3(df, bucket, name):","    \"\"\"Write S3 Bucket\"\"\"","","    csv_buffer = StringIO()","    df.to_csv(csv_buffer)","    s3_resource = boto3.resource('s3')","    filename = f\"{name}_sentiment.csv\"","    res = s3_resource.Object(bucket, filename).\\","        put(Body=csv_buffer.getvalue())","    LOG.info(f\"result of write to bucket: {bucket} with:\\n {res}\")","","","","def lambda_handler(event, context):","    \"\"\"Entry Point for Lambda\"\"\"","","    LOG.info(f\"SURVEYJOB LAMBDA, event {event}, context {context}\")","    receipt_handle  = event['Records'][0]['receiptHandle'] #sqs message","    #'eventSourceARN': 'arn:aws:sqs:us-east-1:561744971673:producer'","    event_source_arn = event['Records'][0]['eventSourceARN']","","    names = [] #Captured from Queue","","    # Process Queue","    for record in event['Records']:","        body = json.loads(record['body'])","        company_name = body['name']","","        #Capture for processing","        names.append(company_name)","","        extra_logging = {\"body\": body, \"company_name\":company_name}","        LOG.info(f\"SQS CONSUMER LAMBDA, splitting sqs arn with value: {event_source_arn}\",extra=extra_logging)","        qname = event_source_arn.split(\":\")[-1]","        extra_logging[\"queue\"] = qname","        LOG.info(f\"Attemping Deleting SQS receiptHandle {receipt_handle} with queue_name {qname}\", extra=extra_logging)","        res = delete_sqs_msg(queue_name=qname, receipt_handle=receipt_handle)","        LOG.info(f\"Deleted SQS receipt_handle {receipt_handle} with res {res}\", extra=extra_logging)","","    # Make Pandas dataframe with wikipedia snippts","    LOG.info(f\"Creating dataframe with values: {names}\")","    df = names_to_wikipedia(names)","","    # Perform Sentiment Analysis","    df = apply_sentiment(df)","    LOG.info(f\"Sentiment from FANG companies: {df.to_dict()}\")","","    # Write result to S3","    write_s3(df=df, bucket=\"fangsentiment\", name=names)"]}],[{"start":{"row":172,"column":41},"end":{"row":172,"column":42},"action":"insert","lines":["6"],"id":17},{"start":{"row":172,"column":42},"end":{"row":172,"column":43},"action":"insert","lines":["9"]}],[{"start":{"row":150,"column":32},"end":{"row":150,"column":33},"action":"remove","lines":["e"],"id":29},{"start":{"row":150,"column":31},"end":{"row":150,"column":32},"action":"remove","lines":["m"]},{"start":{"row":150,"column":30},"end":{"row":150,"column":31},"action":"remove","lines":["a"]}],[{"start":{"row":150,"column":30},"end":{"row":150,"column":31},"action":"insert","lines":["a"],"id":30},{"start":{"row":150,"column":31},"end":{"row":150,"column":32},"action":"insert","lines":["m"]},{"start":{"row":150,"column":32},"end":{"row":150,"column":33},"action":"insert","lines":["e"]}],[{"start":{"row":150,"column":32},"end":{"row":150,"column":33},"action":"remove","lines":["e"],"id":31},{"start":{"row":150,"column":31},"end":{"row":150,"column":32},"action":"remove","lines":["m"]},{"start":{"row":150,"column":30},"end":{"row":150,"column":31},"action":"remove","lines":["a"]},{"start":{"row":150,"column":29},"end":{"row":150,"column":30},"action":"remove","lines":["n"]}],[{"start":{"row":150,"column":29},"end":{"row":150,"column":30},"action":"insert","lines":["g"],"id":32},{"start":{"row":150,"column":30},"end":{"row":150,"column":31},"action":"insert","lines":["u"]},{"start":{"row":150,"column":31},"end":{"row":150,"column":32},"action":"insert","lines":["i"]},{"start":{"row":150,"column":32},"end":{"row":150,"column":33},"action":"insert","lines":["d"]}],[{"start":{"row":150,"column":32},"end":{"row":150,"column":33},"action":"remove","lines":["d"],"id":33},{"start":{"row":150,"column":31},"end":{"row":150,"column":32},"action":"remove","lines":["i"]},{"start":{"row":150,"column":30},"end":{"row":150,"column":31},"action":"remove","lines":["u"]},{"start":{"row":150,"column":29},"end":{"row":150,"column":30},"action":"remove","lines":["g"]}],[{"start":{"row":150,"column":29},"end":{"row":150,"column":30},"action":"insert","lines":["n"],"id":34},{"start":{"row":150,"column":30},"end":{"row":150,"column":31},"action":"insert","lines":["a"]},{"start":{"row":150,"column":31},"end":{"row":150,"column":32},"action":"insert","lines":["m"]},{"start":{"row":150,"column":32},"end":{"row":150,"column":33},"action":"insert","lines":["e"]}],[{"start":{"row":142,"column":4},"end":{"row":142,"column":5},"action":"remove","lines":["#"],"id":47}],[{"start":{"row":142,"column":4},"end":{"row":142,"column":5},"action":"insert","lines":["#"],"id":48}],[{"start":{"row":23,"column":20},"end":{"row":24,"column":0},"action":"insert","lines":["",""],"id":50},{"start":{"row":24,"column":0},"end":{"row":25,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":25,"column":0},"end":{"row":25,"column":24},"action":"insert","lines":["bucket=\"fangsentiment69\""],"id":51}],[{"start":{"row":25,"column":0},"end":{"row":25,"column":24},"action":"remove","lines":["bucket=\"fangsentiment69\""],"id":53}],[{"start":{"row":143,"column":58},"end":{"row":143,"column":59},"action":"insert","lines":[","],"id":58}],[{"start":{"row":143,"column":58},"end":{"row":143,"column":59},"action":"remove","lines":[","],"id":59}],[{"start":{"row":142,"column":67},"end":{"row":142,"column":68},"action":"insert","lines":[","],"id":60}],[{"start":{"row":142,"column":67},"end":{"row":142,"column":68},"action":"remove","lines":[","],"id":70}],[{"start":{"row":43,"column":36},"end":{"row":43,"column":37},"action":"remove","lines":["t"],"id":71},{"start":{"row":43,"column":35},"end":{"row":43,"column":36},"action":"remove","lines":["s"]},{"start":{"row":43,"column":34},"end":{"row":43,"column":35},"action":"remove","lines":["e"]},{"start":{"row":43,"column":33},"end":{"row":43,"column":34},"action":"remove","lines":["w"]}],[{"start":{"row":43,"column":33},"end":{"row":43,"column":34},"action":"insert","lines":["e"],"id":72},{"start":{"row":43,"column":34},"end":{"row":43,"column":35},"action":"insert","lines":["a"]},{"start":{"row":43,"column":35},"end":{"row":43,"column":36},"action":"insert","lines":["s"]},{"start":{"row":43,"column":36},"end":{"row":43,"column":37},"action":"insert","lines":["t"]}],[{"start":{"row":43,"column":38},"end":{"row":43,"column":39},"action":"remove","lines":["2"],"id":73}],[{"start":{"row":43,"column":38},"end":{"row":43,"column":39},"action":"insert","lines":["1"],"id":74}],[{"start":{"row":174,"column":27},"end":{"row":174,"column":44},"action":"remove","lines":["\"fangsentiment69\""],"id":76},{"start":{"row":174,"column":27},"end":{"row":174,"column":55},"action":"insert","lines":["arn:aws:s3:::fangsentiment96"]}],[{"start":{"row":174,"column":39},"end":{"row":174,"column":40},"action":"remove","lines":[":"],"id":77},{"start":{"row":174,"column":38},"end":{"row":174,"column":39},"action":"remove","lines":[":"]},{"start":{"row":174,"column":37},"end":{"row":174,"column":38},"action":"remove","lines":[":"]},{"start":{"row":174,"column":36},"end":{"row":174,"column":37},"action":"remove","lines":["3"]},{"start":{"row":174,"column":35},"end":{"row":174,"column":36},"action":"remove","lines":["s"]},{"start":{"row":174,"column":34},"end":{"row":174,"column":35},"action":"remove","lines":[":"]},{"start":{"row":174,"column":33},"end":{"row":174,"column":34},"action":"remove","lines":["s"]},{"start":{"row":174,"column":32},"end":{"row":174,"column":33},"action":"remove","lines":["w"]},{"start":{"row":174,"column":31},"end":{"row":174,"column":32},"action":"remove","lines":["a"]},{"start":{"row":174,"column":30},"end":{"row":174,"column":31},"action":"remove","lines":[":"]},{"start":{"row":174,"column":29},"end":{"row":174,"column":30},"action":"remove","lines":["n"]},{"start":{"row":174,"column":28},"end":{"row":174,"column":29},"action":"remove","lines":["r"]},{"start":{"row":174,"column":27},"end":{"row":174,"column":28},"action":"remove","lines":["a"]}],[{"start":{"row":174,"column":42},"end":{"row":174,"column":43},"action":"insert","lines":["'"],"id":80}],[{"start":{"row":174,"column":27},"end":{"row":174,"column":28},"action":"insert","lines":["'"],"id":81}],[{"start":{"row":174,"column":28},"end":{"row":174,"column":43},"action":"remove","lines":["fangsentiment96"],"id":82},{"start":{"row":174,"column":28},"end":{"row":174,"column":29},"action":"insert","lines":["8"]},{"start":{"row":174,"column":29},"end":{"row":174,"column":30},"action":"insert","lines":["2"]},{"start":{"row":174,"column":30},"end":{"row":174,"column":31},"action":"insert","lines":["7"]},{"start":{"row":174,"column":31},"end":{"row":174,"column":32},"action":"insert","lines":["4"]},{"start":{"row":174,"column":32},"end":{"row":174,"column":33},"action":"insert","lines":["0"]},{"start":{"row":174,"column":33},"end":{"row":174,"column":34},"action":"insert","lines":["1"]},{"start":{"row":174,"column":34},"end":{"row":174,"column":35},"action":"insert","lines":["5"]}],[{"start":{"row":174,"column":35},"end":{"row":174,"column":36},"action":"remove","lines":["'"],"id":83}],[{"start":{"row":174,"column":27},"end":{"row":174,"column":28},"action":"remove","lines":["'"],"id":84}],[{"start":{"row":174,"column":33},"end":{"row":174,"column":34},"action":"remove","lines":["5"],"id":85},{"start":{"row":174,"column":32},"end":{"row":174,"column":33},"action":"remove","lines":["1"]},{"start":{"row":174,"column":31},"end":{"row":174,"column":32},"action":"remove","lines":["0"]},{"start":{"row":174,"column":30},"end":{"row":174,"column":31},"action":"remove","lines":["4"]},{"start":{"row":174,"column":29},"end":{"row":174,"column":30},"action":"remove","lines":["7"]},{"start":{"row":174,"column":28},"end":{"row":174,"column":29},"action":"remove","lines":["2"]},{"start":{"row":174,"column":27},"end":{"row":174,"column":28},"action":"remove","lines":["8"]}],[{"start":{"row":174,"column":27},"end":{"row":174,"column":29},"action":"insert","lines":["''"],"id":86}],[{"start":{"row":174,"column":28},"end":{"row":174,"column":29},"action":"insert","lines":["c"],"id":87},{"start":{"row":174,"column":29},"end":{"row":174,"column":30},"action":"insert","lines":["o"]},{"start":{"row":174,"column":30},"end":{"row":174,"column":31},"action":"insert","lines":["m"]},{"start":{"row":174,"column":31},"end":{"row":174,"column":32},"action":"insert","lines":["s"]}],[{"start":{"row":174,"column":31},"end":{"row":174,"column":32},"action":"remove","lines":["s"],"id":88},{"start":{"row":174,"column":30},"end":{"row":174,"column":31},"action":"remove","lines":["m"]}],[{"start":{"row":174,"column":30},"end":{"row":174,"column":31},"action":"insert","lines":["n"],"id":89},{"start":{"row":174,"column":31},"end":{"row":174,"column":32},"action":"insert","lines":["s"]},{"start":{"row":174,"column":32},"end":{"row":174,"column":33},"action":"insert","lines":["u"]},{"start":{"row":174,"column":33},"end":{"row":174,"column":34},"action":"insert","lines":["m"]},{"start":{"row":174,"column":34},"end":{"row":174,"column":35},"action":"insert","lines":["e"]},{"start":{"row":174,"column":35},"end":{"row":174,"column":36},"action":"insert","lines":["r"]},{"start":{"row":174,"column":36},"end":{"row":174,"column":37},"action":"insert","lines":["9"]},{"start":{"row":174,"column":37},"end":{"row":174,"column":38},"action":"insert","lines":["6"]}],[{"start":{"row":144,"column":46},"end":{"row":144,"column":48},"action":"remove","lines":["56"],"id":95},{"start":{"row":144,"column":47},"end":{"row":144,"column":51},"action":"remove","lines":["7449"]},{"start":{"row":144,"column":47},"end":{"row":144,"column":48},"action":"insert","lines":["0"]},{"start":{"row":144,"column":51},"end":{"row":144,"column":52},"action":"insert","lines":["4"]},{"start":{"row":144,"column":54},"end":{"row":144,"column":58},"action":"insert","lines":["7472"]},{"start":{"row":174,"column":27},"end":{"row":174,"column":30},"action":"remove","lines":["'co"]},{"start":{"row":174,"column":27},"end":{"row":174,"column":30},"action":"insert","lines":["\"fa"]},{"start":{"row":174,"column":31},"end":{"row":174,"column":32},"action":"insert","lines":["g"]},{"start":{"row":174,"column":33},"end":{"row":174,"column":34},"action":"remove","lines":["u"]},{"start":{"row":174,"column":33},"end":{"row":174,"column":37},"action":"insert","lines":["enti"]},{"start":{"row":174,"column":39},"end":{"row":174,"column":40},"action":"remove","lines":["r"]},{"start":{"row":174,"column":39},"end":{"row":174,"column":42},"action":"insert","lines":["nt6"]},{"start":{"row":174,"column":43},"end":{"row":174,"column":45},"action":"remove","lines":["6'"]},{"start":{"row":174,"column":43},"end":{"row":174,"column":44},"action":"insert","lines":["\""]}],[{"start":{"row":174,"column":40},"end":{"row":174,"column":41},"action":"remove","lines":["t"],"id":96},{"start":{"row":174,"column":39},"end":{"row":174,"column":40},"action":"remove","lines":["n"]},{"start":{"row":174,"column":38},"end":{"row":174,"column":39},"action":"remove","lines":["e"]},{"start":{"row":174,"column":37},"end":{"row":174,"column":38},"action":"remove","lines":["m"]},{"start":{"row":174,"column":36},"end":{"row":174,"column":37},"action":"remove","lines":["i"]},{"start":{"row":174,"column":35},"end":{"row":174,"column":36},"action":"remove","lines":["t"]},{"start":{"row":174,"column":34},"end":{"row":174,"column":35},"action":"remove","lines":["n"]},{"start":{"row":174,"column":33},"end":{"row":174,"column":34},"action":"remove","lines":["e"]},{"start":{"row":174,"column":32},"end":{"row":174,"column":33},"action":"remove","lines":["s"]},{"start":{"row":174,"column":31},"end":{"row":174,"column":32},"action":"remove","lines":["g"]},{"start":{"row":174,"column":30},"end":{"row":174,"column":31},"action":"remove","lines":["n"]},{"start":{"row":174,"column":29},"end":{"row":174,"column":30},"action":"remove","lines":["a"]},{"start":{"row":174,"column":28},"end":{"row":174,"column":29},"action":"remove","lines":["f"]}],[{"start":{"row":174,"column":28},"end":{"row":174,"column":29},"action":"insert","lines":["c"],"id":97},{"start":{"row":174,"column":29},"end":{"row":174,"column":30},"action":"insert","lines":["o"]},{"start":{"row":174,"column":30},"end":{"row":174,"column":31},"action":"insert","lines":["n"]},{"start":{"row":174,"column":31},"end":{"row":174,"column":32},"action":"insert","lines":["s"]},{"start":{"row":174,"column":32},"end":{"row":174,"column":33},"action":"insert","lines":["u"]},{"start":{"row":174,"column":33},"end":{"row":174,"column":34},"action":"insert","lines":["m"]}],[{"start":{"row":174,"column":34},"end":{"row":174,"column":35},"action":"insert","lines":["e"],"id":98},{"start":{"row":174,"column":35},"end":{"row":174,"column":36},"action":"insert","lines":["r"]}],[{"start":{"row":174,"column":37},"end":{"row":174,"column":38},"action":"remove","lines":["9"],"id":99},{"start":{"row":174,"column":36},"end":{"row":174,"column":37},"action":"remove","lines":["6"]}],[{"start":{"row":174,"column":36},"end":{"row":174,"column":37},"action":"insert","lines":["9"],"id":100},{"start":{"row":174,"column":37},"end":{"row":174,"column":38},"action":"insert","lines":["6"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":174,"column":52},"end":{"row":174,"column":52},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1587346637956,"hash":"1e3128b45dbf005ff1b01358d578a65e763960c9"}